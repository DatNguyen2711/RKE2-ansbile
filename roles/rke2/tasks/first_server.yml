---

- name: Create the RKE2 config dir
  ansible.builtin.file:
    state: directory
    path: /etc/rancher/rke2
    owner: root
    group: root
    mode: 755

- name: Copy rke2 config
  ansible.builtin.template:
    src: "{{ rke2_config }}"
    dest: /etc/rancher/rke2/config.yaml
    owner: root
    group: root
    mode: 644

- name: Copy kubelet config
  ansible.builtin.template:
    src: templates/kubelet-config.yaml.j2
    dest: /etc/rancher/rke2/kubelet-config.yaml
    owner: root
    group: root
    mode: 600
  when: rke2_kubelet_config | length > 0

- name: Copy Containerd Registry Configuration file
  ansible.builtin.template:
    src: "{{ rke2_custom_registry_path }}"
    dest: /etc/rancher/rke2/registries.yaml
    owner: root
    group: root
    mode: 644
  when: (rke2_custom_registry_mirrors | length > 0 or rke2_custom_registry_configs | length > 0)

- name: Restore etcd from file
  when: do_etcd_restore is defined
  block:
  - name: Create the RKE2 etcd snapshot dir
    ansible.builtin.file:
      state: directory
      path: "{{ rke2_etcd_snapshot_destination_dir }}"
      recurse: true
      mode: 755
  - name: Copy etcd snapshot file
    ansible.builtin.copy:
      src: "{{ rke2_etcd_snapshot_source_dir }}/{{ rke2_etcd_snapshot_file }}"
      dest: "{{ rke2_etcd_snapshot_destination_dir }}/{{ rke2_etcd_snapshot_file }}"
      mode: 644
      force: true
  - name: Restore etcd from a snapshot
    ansible.builtin.shell: |
      rke2 server \
      --cluster-reset \
      --cluster-reset-restore-path="{{ rke2_etcd_snapshot_destination_dir }}/{{ rke2_etcd_snapshot_file }}" \
      --token {{ rke2_token }}
    register: task_output # <- Registers the command output.
    changed_when: task_output.rc != 0 # <- Uses the return code to define when the task has changed.
    when: not ansible_check_mode



- name: Start RKE2 service on the first server
  ansible.builtin.systemd:
    name: "rke2-server.service"
    state: started
    enabled: true
  environment:
    RKE2_TOKEN: "{{ rke2_token }}"

- name: Mask RKE2 agent service on the first server
  ansible.builtin.systemd:
    name: "rke2-agent.service"
    enabled: false
    masked: true

- name: Wait for the first server be ready
  ansible.builtin.shell: |
    set -o pipefail
    {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml get nodes 
  args:
    executable: /bin/bash
  changed_when: false
  register: first_server
  until: '" Ready "  in first_server.stdout'
  retries: 40
  delay: 15

- name: Restore etcd
  when: do_etcd_restore is defined or do_etcd_restore_from_s3 is defined
  block:
  - name: Get registered nodes
    ansible.builtin.shell:
      cmd: |
        set -o pipefail
        {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
        get nodes --no-headers | awk '{print $1}'
    args:
      executable: /bin/bash
    changed_when: false
    register: registered_node_names

  - name: Get all node names
    ansible.builtin.set_fact:
      node_names: "{{ hostvars | dict2items | map(attribute='value.rke2_node_name') }}"
    run_once: true
    register: node_names

  - name: Remove old <node>.node-password.rke2 secrets
    ansible.builtin.shell: |
      {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
      delete secret {{ item }}.node-password.rke2 -n kube-system 2>&1 || true
    args:
      executable: /bin/bash
    with_items: "{{ registered_node_names.stdout_lines | difference(node_names) }}"
    changed_when: false

  - name: Remove old nodes
    ansible.builtin.shell: |
      {{ rke2_data_path }}/bin/kubectl --kubeconfig /etc/rancher/rke2/rke2.yaml \
      delete node {{ item }} 2>&1 || true
    args:
      executable: /bin/bash
    with_items: "{{ registered_node_names.stdout_lines | difference(node_names) }}"
    changed_when: false

- name: Set an Active Server variable
  ansible.builtin.set_fact:
    active_server: "{{ inventory_hostname }}"
  run_once: true

